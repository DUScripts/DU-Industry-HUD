{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"unit.hide()\ndatabank = nil\nindustries = {}\nfor slot_name, slot in pairs(unit) do\n    if \n        type(slot) == \"table\"\n        and type(slot.export) == \"table\"\n        and slot.getElementClass\n    then\n        slot_type = slot.getElementClass():lower()\n        if slot_type == 'databankunit' then\n            databank = slot\n        end\n        \n        if slot_type == \"assembly line\" or\n           slot_type == \"glass furnace\" or\n           slot_type == \"3d printer\" or\n           slot_type == \"smelter\" or\n           slot_type == \"recycler\" or\n           slot_type:find(\"refiner\") or\n           slot_type:find(\"industry\") or\n           slot_type == \"transfer unit\"\n        then\n            table.insert(industries, slot)\n        end\n    end\nend\nif databank ~= nil then\n    for i = 1, #industries, 1 do\n         local id = industries[i].getId()\n    \tlocal data = {}\n         if databank.hasKey(id) == 1 then\n            data = json.decode(databank.getStringValue(id))\n            if data.command ~= nil and data.command ~= \"\" then\n                if data.command:lower() == \"start\" then\n                    industries[i].start()\n                elseif data.command:lower():find(\"maintain\") then\n                    local splitted = strSplit(data.command, \"_\")\n                    local quantity = tonumber(splitted[2])\n                    industries[i].startAndMaintain(quantity)\n                elseif data.command:lower():find(\"batch\") then\n                    local splitted = strSplit(data.command, \"_\")\n                    local quantity = tonumber(splitted[2])\n                    industries[i].batchStart(quantity)\n                elseif data.command:lower() == \"stop\" then\n                    industries[i].hardStop(0)\n                elseif data.command:lower() == \"soft_stop\" then\n                    industries[i].softStop()\n                end\n                data.command = \"\"\n            end\n         else\n            data.command = \"\"\n         end\n         data.id = id\n         data.status = industries[i].getStatus()\n         data.cyclesFromStart = industries[i].getCycleCountSinceStartup()\n         data.efficiency = industries[i].getEfficiency()\n         data.uptime = industries[i].getUptime()\n         local jsonData = json.encode(data)\n         databank.setStringValue(id, jsonData)\n    \t--system.print(jsonData)\n    end\nend\nunit.exit()","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"function strSplit(s, delimiter)\n    result = {};\n    for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n        table.insert(result, match);\n    end\n    return result;\nend","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"1"}],"methods":[],"events":[]}